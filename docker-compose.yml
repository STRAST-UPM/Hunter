services:
  hunter:
    image:
      ghcr.io/strast-upm/hunter
    container_name: hunter
    environment:
      IPINFO_CACHE_HOST: ipinfo_cache
      DATABASE_HOST: postgres
      LOG_LEVEL: ${HUNTER_LOG_LEVEL}
      HUNTER_PORT: ${HUNTER_PORT}
    ports:
      - ${HUNTER_PORT}":"${HUNTER_PORT}
    networks:
      - main_network
    depends_on:
      postgres:
        condition: service_healthy
      ipinfo_cache:
        condition: service_started

  ipinfo_cache:
    image: ghcr.io/strast-upm/ipinfo_cache
    container_name: ipinfo_cache
    ports:
      - "5000:5000"
    environment:
      IPINFO_TOKEN: ${IPINFO_CACHE_IPINFO_TOKEN}
    volumes:
      - ipinfo_cache_data:/db
    networks:
      - main_network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: postgresql_admin
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - postgres_admin_volume:/var/lib/pgadmin
    networks:
      - main_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_hunter_data:/var/lib/postgresql/data
    networks:
      - main_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  postgres_admin_volume:
  postgres_hunter_data:
  ipinfo_cache_data:

networks:
  main_network:
    driver: bridge
